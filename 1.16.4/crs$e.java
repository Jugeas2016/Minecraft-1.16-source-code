/*      */ import java.util.List;
/*      */ import java.util.Random;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class e
/*      */   extends crs.p
/*      */ {
/*      */   private final boolean a;
/*      */   
/*      */   public e(int ☃, Random random, cra cra1, gc gc1) {
/* 1094 */     super(clb.x, ☃);
/*      */     
/* 1096 */     a(gc1);
/* 1097 */     this.d = a(random);
/* 1098 */     this.n = cra1;
/* 1099 */     this.a = (cra1.e() > 6);
/*      */   }
/*      */   
/*      */   public e(csw ☃, md md1) {
/* 1103 */     super(clb.x, md1);
/* 1104 */     this.a = md1.q("Tall");
/*      */   }
/*      */ 
/*      */   
/*      */   protected void a(md ☃) {
/* 1109 */     super.a(☃);
/* 1110 */     ☃.a("Tall", this.a);
/*      */   }
/*      */ 
/*      */   
/*      */   public static e a(List<cru> ☃, Random random, int i, int j, int k, gc gc1, int m) {
/* 1115 */     cra cra = cra.a(i, j, k, -4, -1, 0, 14, 11, 15, gc1);
/*      */     
/* 1117 */     if (!a(cra) || cru.a(☃, cra) != null) {
/*      */       
/* 1119 */       cra = cra.a(i, j, k, -4, -1, 0, 14, 6, 15, gc1);
/*      */       
/* 1121 */       if (!a(cra) || cru.a(☃, cra) != null) {
/* 1122 */         return null;
/*      */       }
/*      */     } 
/*      */     
/* 1126 */     return new e(m, random, cra, gc1);
/*      */   }
/*      */ 
/*      */   
/*      */   public boolean a(bsr ☃, bsn bsn1, cfy cfy1, Random random, cra cra1, brd brd1, fx fx1) {
/* 1131 */     int i = 11;
/* 1132 */     if (!this.a) {
/* 1133 */       i = 6;
/*      */     }
/*      */ 
/*      */     
/* 1137 */     a(☃, cra1, 0, 0, 0, 13, i - 1, 14, true, random, crs.b());
/*      */     
/* 1139 */     a(☃, random, cra1, this.d, 4, 1, 0);
/*      */ 
/*      */     
/* 1142 */     a(☃, cra1, random, 0.07F, 2, 1, 1, 11, 4, 13, bup.aQ.n(), bup.aQ.n(), false, false);
/*      */     
/* 1144 */     int j = 1;
/* 1145 */     int k = 12;
/*      */     
/*      */     int m;
/* 1148 */     for (m = 1; m <= 13; m++) {
/* 1149 */       if ((m - 1) % 4 == 0) {
/* 1150 */         a(☃, cra1, 1, 1, m, 1, 4, m, bup.n.n(), bup.n.n(), false);
/* 1151 */         a(☃, cra1, 12, 1, m, 12, 4, m, bup.n.n(), bup.n.n(), false);
/*      */         
/* 1153 */         a(☃, bup.bM.n().a(cbn.a, gc.f), 2, 3, m, cra1);
/* 1154 */         a(☃, bup.bM.n().a(cbn.a, gc.e), 11, 3, m, cra1);
/*      */         
/* 1156 */         if (this.a) {
/* 1157 */           a(☃, cra1, 1, 6, m, 1, 9, m, bup.n.n(), bup.n.n(), false);
/* 1158 */           a(☃, cra1, 12, 6, m, 12, 9, m, bup.n.n(), bup.n.n(), false);
/*      */         } 
/*      */       } else {
/* 1161 */         a(☃, cra1, 1, 1, m, 1, 4, m, bup.bI.n(), bup.bI.n(), false);
/* 1162 */         a(☃, cra1, 12, 1, m, 12, 4, m, bup.bI.n(), bup.bI.n(), false);
/*      */         
/* 1164 */         if (this.a) {
/* 1165 */           a(☃, cra1, 1, 6, m, 1, 9, m, bup.bI.n(), bup.bI.n(), false);
/* 1166 */           a(☃, cra1, 12, 6, m, 12, 9, m, bup.bI.n(), bup.bI.n(), false);
/*      */         } 
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1172 */     for (m = 3; m < 12; m += 2) {
/* 1173 */       a(☃, cra1, 3, 1, m, 4, 3, m, bup.bI.n(), bup.bI.n(), false);
/* 1174 */       a(☃, cra1, 6, 1, m, 7, 3, m, bup.bI.n(), bup.bI.n(), false);
/* 1175 */       a(☃, cra1, 9, 1, m, 10, 3, m, bup.bI.n(), bup.bI.n(), false);
/*      */     } 
/*      */     
/* 1178 */     if (this.a) {
/*      */       
/* 1180 */       a(☃, cra1, 1, 5, 1, 3, 5, 13, bup.n.n(), bup.n.n(), false);
/* 1181 */       a(☃, cra1, 10, 5, 1, 12, 5, 13, bup.n.n(), bup.n.n(), false);
/* 1182 */       a(☃, cra1, 4, 5, 1, 9, 5, 2, bup.n.n(), bup.n.n(), false);
/* 1183 */       a(☃, cra1, 4, 5, 12, 9, 5, 13, bup.n.n(), bup.n.n(), false);
/*      */       
/* 1185 */       a(☃, bup.n.n(), 9, 5, 11, cra1);
/* 1186 */       a(☃, bup.n.n(), 8, 5, 11, cra1);
/* 1187 */       a(☃, bup.n.n(), 9, 5, 10, cra1);
/*      */       
/* 1189 */       ceh ceh1 = bup.cJ.n().a(bwq.d, Boolean.valueOf(true)).a(bwq.b, Boolean.valueOf(true));
/* 1190 */       ceh ceh2 = bup.cJ.n().a(bwq.a, Boolean.valueOf(true)).a(bwq.c, Boolean.valueOf(true));
/*      */ 
/*      */       
/* 1193 */       a(☃, cra1, 3, 6, 3, 3, 6, 11, ceh2, ceh2, false);
/* 1194 */       a(☃, cra1, 10, 6, 3, 10, 6, 9, ceh2, ceh2, false);
/* 1195 */       a(☃, cra1, 4, 6, 2, 9, 6, 2, ceh1, ceh1, false);
/* 1196 */       a(☃, cra1, 4, 6, 12, 7, 6, 12, ceh1, ceh1, false);
/*      */       
/* 1198 */       a(☃, bup.cJ.n().a(bwq.a, Boolean.valueOf(true)).a(bwq.b, Boolean.valueOf(true)), 3, 6, 2, cra1);
/* 1199 */       a(☃, bup.cJ.n().a(bwq.c, Boolean.valueOf(true)).a(bwq.b, Boolean.valueOf(true)), 3, 6, 12, cra1);
/* 1200 */       a(☃, bup.cJ.n().a(bwq.a, Boolean.valueOf(true)).a(bwq.d, Boolean.valueOf(true)), 10, 6, 2, cra1);
/*      */       
/* 1202 */       for (int n = 0; n <= 2; n++) {
/* 1203 */         a(☃, bup.cJ.n().a(bwq.c, Boolean.valueOf(true)).a(bwq.d, Boolean.valueOf(true)), 8 + n, 6, 12 - n, cra1);
/* 1204 */         if (n != 2) {
/* 1205 */           a(☃, bup.cJ.n().a(bwq.a, Boolean.valueOf(true)).a(bwq.b, Boolean.valueOf(true)), 8 + n, 6, 11 - n, cra1);
/*      */         }
/*      */       } 
/*      */ 
/*      */       
/* 1210 */       ceh ceh3 = bup.cg.n().a(bxv.a, gc.d);
/* 1211 */       a(☃, ceh3, 10, 1, 13, cra1);
/* 1212 */       a(☃, ceh3, 10, 2, 13, cra1);
/* 1213 */       a(☃, ceh3, 10, 3, 13, cra1);
/* 1214 */       a(☃, ceh3, 10, 4, 13, cra1);
/* 1215 */       a(☃, ceh3, 10, 5, 13, cra1);
/* 1216 */       a(☃, ceh3, 10, 6, 13, cra1);
/* 1217 */       a(☃, ceh3, 10, 7, 13, cra1);
/*      */ 
/*      */       
/* 1220 */       int i1 = 7;
/* 1221 */       int i2 = 7;
/* 1222 */       ceh ceh4 = bup.cJ.n().a(bwq.b, Boolean.valueOf(true));
/* 1223 */       a(☃, ceh4, 6, 9, 7, cra1);
/* 1224 */       ceh ceh5 = bup.cJ.n().a(bwq.d, Boolean.valueOf(true));
/* 1225 */       a(☃, ceh5, 7, 9, 7, cra1);
/*      */       
/* 1227 */       a(☃, ceh4, 6, 8, 7, cra1);
/* 1228 */       a(☃, ceh5, 7, 8, 7, cra1);
/*      */       
/* 1230 */       ceh ceh6 = ceh2.a(bwq.d, Boolean.valueOf(true)).a(bwq.b, Boolean.valueOf(true));
/*      */       
/* 1232 */       a(☃, ceh6, 6, 7, 7, cra1);
/* 1233 */       a(☃, ceh6, 7, 7, 7, cra1);
/*      */       
/* 1235 */       a(☃, ceh4, 5, 7, 7, cra1);
/*      */       
/* 1237 */       a(☃, ceh5, 8, 7, 7, cra1);
/*      */       
/* 1239 */       a(☃, ceh4.a(bwq.a, Boolean.valueOf(true)), 6, 7, 6, cra1);
/* 1240 */       a(☃, ceh4.a(bwq.c, Boolean.valueOf(true)), 6, 7, 8, cra1);
/*      */       
/* 1242 */       a(☃, ceh5.a(bwq.a, Boolean.valueOf(true)), 7, 7, 6, cra1);
/* 1243 */       a(☃, ceh5.a(bwq.c, Boolean.valueOf(true)), 7, 7, 8, cra1);
/*      */       
/* 1245 */       ceh ceh7 = bup.bL.n();
/* 1246 */       a(☃, ceh7, 5, 8, 7, cra1);
/* 1247 */       a(☃, ceh7, 8, 8, 7, cra1);
/* 1248 */       a(☃, ceh7, 6, 8, 6, cra1);
/* 1249 */       a(☃, ceh7, 6, 8, 8, cra1);
/* 1250 */       a(☃, ceh7, 7, 8, 6, cra1);
/* 1251 */       a(☃, ceh7, 7, 8, 8, cra1);
/*      */     } 
/*      */ 
/*      */     
/* 1255 */     a(☃, cra1, random, 3, 3, 5, cyq.w);
/* 1256 */     if (this.a) {
/* 1257 */       a(☃, m, 12, 9, 1, cra1);
/* 1258 */       a(☃, cra1, random, 12, 8, 1, cyq.w);
/*      */     } 
/*      */     
/* 1261 */     return true;
/*      */   }
/*      */ }


/* Location:              C:\Users\Georg\OneDrive\Minecraft\Desktop\Minecraft\1.16.4.zip!\crs$e.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */